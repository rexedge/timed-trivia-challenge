generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models remain the same
model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  profession    String?
  role          UserRole   @default(PLAYER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  responses     Response[]
  gameParticipations GameParticipant[] // Added for leaderboard
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
}

model Question {
  id            String         @id @default(cuid())
  text          String
  options       String         // JSON array of options
  correctAnswer String
  gameQuestions GameQuestion[]
  responses     Response[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Game {
  id            String         @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  status        GameStatus     @default(SCHEDULED)
  answerTime    Int           @default(30) // Changed to 30 seconds default
  resultTime    Int           @default(15) // Changed to 15 seconds default
  intervalTime  Int           @default(15) // Changed to 15 seconds default
  gameQuestions GameQuestion[]
  responses     Response[]
  participants  GameParticipant[] // Added for leaderboard
  messages      ChatMessage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Added for real-time game participation and leaderboard
model GameParticipant {
  id        String   @id @default(cuid())
  gameId    String
  userId    String
  score     Float    @default(0)
  rank      Int?     // Current rank in the game
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  joinedAt  DateTime @default(now())
  lastActive DateTime @default(now())

  @@unique([gameId, userId])
  @@index([gameId])
  @@index([userId])
}

model GameQuestion {
  id          String    @id @default(cuid())
  gameId      String
  questionId  String
  displayTime DateTime  // When this question should be displayed
  duration    Int       @default(30) // Changed to 30 seconds default
  game       Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  question   Question  @relation(fields: [questionId], references: [id])
  responses  Response[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([gameId, questionId])
}

model Response {
  id             String       @id @default(cuid())
  gameId         String
  questionId     String
  userId         String
  gameQuestionId String
  timeToAnswer   Float       // Time taken to answer in seconds
  answer         String
  isCorrect      Boolean     @default(false) // Added to track correct answers
  score          Float       // Base score + speed bonus
  answeredAt     DateTime    @default(now())
  game          Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  gameQuestion  GameQuestion @relation(fields: [gameQuestionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([gameId, questionId, userId])
}

model GameSettings {
  id               String   @id @default(cuid())
  gameStartTime    String   // Daily start time (HH:mm)
  gameEndTime      String   // Daily end time (HH:mm)
  questionInterval Int      @default(15) // Changed to 15 seconds default
  questionDuration Int      @default(30) // Changed to 30 seconds default
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ChatMessage {
  id          String    @id @default(cuid())
  content     String
  senderId    String
  senderName  String
  senderImage String?
  recipientId String?   // For private messages
  gameId      String?   // For game-specific chats
  createdAt   DateTime  @default(now())
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User?     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  game        Game?     @relation(fields: [gameId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([gameId])
}

enum UserRole {
  ADMIN
  PLAYER
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS // Changed ACTIVE to IN_PROGRESS for clarity
  ENDED      // Changed COMPLETED to ENDED for clarity
  CANCELLED
}