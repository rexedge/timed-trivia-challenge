generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  phoneNumber   String?
  profession    String?
  role          UserRole   @default(PLAYER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  responses     Response[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id            String          @id @default(cuid())
  text          String
  options       Json            @default("[]") // Array of options
  correctAnswer String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gameQuestions GameQuestion[]
  responses     Response[]
}

model Game {
  id            String          @id @default(cuid())
  startTime     DateTime
  endTime       DateTime
  status        GameStatus      @default(SCHEDULED)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gameQuestions GameQuestion[]
  responses     Response[]
}

model GameQuestion {
  id          String   @id @default(cuid())
  gameId      String
  questionId  String
  displayTime DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([gameId, questionId])
}

model Response {
  id            String   @id @default(cuid())
  userId        String
  questionId    String
  gameId        String
  answer        String
  timeToAnswer  Float    // Time in seconds
  score         Float
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, gameId])
}

model GameSettings {
  id                String   @id @default(cuid())
  gameStartTime     String   @default("12:00") // Format: "HH:MM"
  gameEndTime       String   @default("15:45") // Format: "HH:MM"
  questionInterval  Int      @default(15)      // In minutes
  questionDuration  Int      @default(5)       // In minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum UserRole {
  ADMIN
  PLAYER
}

enum GameStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}